# Generated by Django 5.2.5 on 2025-08-16 06:44

import apps.users.managers.user_manager
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated At')),
                ('first_name', models.CharField(validators=[django.core.validators.RegexValidator(code='invalid_first_name', message='First Name Must Contain Only Letters With No Spaces', regex='^[A-Za-z]+$'), django.core.validators.MaxLengthValidator(limit_value=60, message='First Name Must Not Exceed 60 Characters')], verbose_name='First Name')),
                ('last_name', models.CharField(validators=[django.core.validators.RegexValidator(code='invalid_last_name', message='Last Name Must Contain Only Letters With No Spaces', regex='^[A-Za-z]+$'), django.core.validators.MaxLengthValidator(limit_value=60, message='Last Name Must Not Exceed 60 Characters')], verbose_name='Last Name')),
                ('email', models.CharField(db_index=True, unique=True, validators=[django.core.validators.EmailValidator(code='invalid_email', message='Invalid Email Address')], verbose_name='Email Address')),
                ('username', models.CharField(db_index=True, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message='Username Must Contain Only Alphanumeric Characters With No Spaces', regex='^[A-Za-z0-9]+$'), django.core.validators.MaxLengthValidator(limit_value=60, message='Username Must Not Exceed 60 Characters')], verbose_name='Username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', apps.users.managers.user_manager.UserManager()),
            ],
        ),
    ]
